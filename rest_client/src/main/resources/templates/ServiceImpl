package com.mera.borisgk98.autoshowroom.client.service;

import com.mera.borisgk98.autoshowroom.client.exception.ModelNotFound;
import com.mera.borisgk98.autoshowroom.client.model.$Model$;
import com.mera.borisgk98.autoshowroom.client.rest.api.DefaultApi;
import com.mera.borisgk98.autoshowroom.client.rest.invoker.ApiException;
import com.mera.borisgk98.autoshowroom.client.tool.Converter;
import org.springframework.context.annotation.Primary;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;


import java.util.List;
import java.util.stream.Collectors;

@Component
@Primary
public class $Model$ServiceImpl implements com.mera.borisgk98.autoshowroom.client.service.$Model$Service {

    @Autowired
    private DefaultApi api;

    @Override
    public $Model$ create($Model$ m) {
        try {
            com.mera.borisgk98.autoshowroom.client.rest.model.$Model$ dto =
                    Converter.convert(m, com.mera.borisgk98.autoshowroom.client.rest.model.$Model$.class);
            return Converter.convert(api.$model$Post(dto), $Model$.class);
        }
        catch (ApiException exc) {
            System.err.println(exc);
            return null;
        }
    }

    @Override
    public $Model$ read(Integer id) throws ModelNotFound {
        try {
            return Converter.convert(api.$model$$Modelufl$IdGet(id), $Model$.class);
        }
        catch (ApiException exc) {
            System.err.println(exc);
            return null;
        }
    }

    @Override
    public $Model$ update($Model$ m) throws ModelNotFound {
        try {
            com.mera.borisgk98.autoshowroom.client.rest.model.$Model$ dto =
                    Converter.convert(m, com.mera.borisgk98.autoshowroom.client.rest.model.$Model$.class);
            return Converter.convert(api.$model$$Modelufl$IdPut(dto), $Model$.class);
        }
        catch (ApiException exc) {
            System.err.println(exc);
            return null;
        }
    }

    @Override
    public void delete(Integer id) throws ModelNotFound {
        try {
            api.$model$$Modelufl$IdDelete(id);
        }
        catch (ApiException exc) {
            System.err.println(exc);
        }
    }

    @Override
    public List<$Model$> getAll() {
        try {
            return api.$model$Get(null, null)
                    .stream()
                    .map(x -> Converter.convert(x, $Model$.class))
                    .collect(Collectors.toList());
        }
        catch (ApiException exc) {
            System.err.println(exc);
            return null;
        }
    }

    @Override
    public List<$Model$> getRange(Integer limit, Integer offset) {
        try {
            return api.$model$Get(limit, offset)
                    .stream()
                    .map(x -> Converter.convert(x, $Model$.class))
                    .collect(Collectors.toList());
        }
        catch (ApiException exc) {
            System.err.println(exc);
            return null;
        }
    }
}
