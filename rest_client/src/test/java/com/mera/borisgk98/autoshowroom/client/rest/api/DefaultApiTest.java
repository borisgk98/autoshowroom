/*
 * Autoshowroom API
 * An API that allows clients to obtain existing information of orders, create, edit and delete orders
 *
 * OpenAPI spec version: 0.1
 * Contact: borisgk98@ya.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mera.borisgk98.autoshowroom.client.rest.api;

import com.mera.borisgk98.autoshowroom.client.rest.invoker.ApiException;
import com.mera.borisgk98.autoshowroom.client.models.Auto;
import com.mera.borisgk98.autoshowroom.client.models.AutoMark;
import com.mera.borisgk98.autoshowroom.client.models.AutoModel;
import com.mera.borisgk98.autoshowroom.client.models.AutoOption;
import com.mera.borisgk98.autoshowroom.client.models.Customer;
import com.mera.borisgk98.autoshowroom.client.models.Order;
import com.mera.borisgk98.autoshowroom.client.models.Seller;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Delate information about auto by auto id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoAutoIdDeleteTest() throws ApiException {
        Integer autoId = null;
        api.autoAutoIdDelete(autoId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about auto by auto id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoAutoIdGetTest() throws ApiException {
        Integer autoId = null;
        Auto response = api.autoAutoIdGet(autoId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about auto
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoAutoIdPutTest() throws ApiException {
        Auto auto = null;
        Auto response = api.autoAutoIdPut(auto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<Auto> response = api.autoGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about auto
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoPostTest() throws ApiException {
        Auto auto = null;
        Auto response = api.autoPost(auto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about automark by automark id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automarkAutomarkIdDeleteTest() throws ApiException {
        Integer automarkId = null;
        api.automarkAutomarkIdDelete(automarkId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about automark by automark id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automarkAutomarkIdGetTest() throws ApiException {
        Integer automarkId = null;
        AutoMark response = api.automarkAutomarkIdGet(automarkId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about automark
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automarkAutomarkIdPutTest() throws ApiException {
        AutoMark autoMark = null;
        AutoMark response = api.automarkAutomarkIdPut(autoMark);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automarkGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<AutoMark> response = api.automarkGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about automark
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automarkPostTest() throws ApiException {
        AutoMark autoMark = null;
        AutoMark response = api.automarkPost(autoMark);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about automodel by automodel id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automodelAutomodelIdDeleteTest() throws ApiException {
        Integer automodelId = null;
        api.automodelAutomodelIdDelete(automodelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about automodel by automodel id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automodelAutomodelIdGetTest() throws ApiException {
        Integer automodelId = null;
        AutoModel response = api.automodelAutomodelIdGet(automodelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about automodel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automodelAutomodelIdPutTest() throws ApiException {
        AutoModel autoModel = null;
        AutoModel response = api.automodelAutomodelIdPut(autoModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automodelGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<AutoModel> response = api.automodelGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about automodel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void automodelPostTest() throws ApiException {
        AutoModel autoModel = null;
        AutoModel response = api.automodelPost(autoModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about autooption by autooption id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autooptionAutooptionIdDeleteTest() throws ApiException {
        Integer autooptionId = null;
        api.autooptionAutooptionIdDelete(autooptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about autooption by autooption id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autooptionAutooptionIdGetTest() throws ApiException {
        Integer autooptionId = null;
        AutoOption response = api.autooptionAutooptionIdGet(autooptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about autooption
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autooptionAutooptionIdPutTest() throws ApiException {
        AutoOption autoOption = null;
        AutoOption response = api.autooptionAutooptionIdPut(autoOption);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autooptionGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<AutoOption> response = api.autooptionGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about autooption
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autooptionPostTest() throws ApiException {
        AutoOption autoOption = null;
        AutoOption response = api.autooptionPost(autoOption);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about customer by customer id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerCustomerIdDeleteTest() throws ApiException {
        Integer customerId = null;
        api.customerCustomerIdDelete(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about customer by customer id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerCustomerIdGetTest() throws ApiException {
        Integer customerId = null;
        Customer response = api.customerCustomerIdGet(customerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerCustomerIdPutTest() throws ApiException {
        Customer customer = null;
        Customer response = api.customerCustomerIdPut(customer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<Customer> response = api.customerGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerPostTest() throws ApiException {
        Customer customer = null;
        Customer response = api.customerPost(customer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<Order> response = api.orderGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about order by order id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderOrderIdDeleteTest() throws ApiException {
        Integer orderId = null;
        api.orderOrderIdDelete(orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about order by order id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderOrderIdGetTest() throws ApiException {
        Integer orderId = null;
        Order response = api.orderOrderIdGet(orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderOrderIdPutTest() throws ApiException {
        Order order = null;
        Order response = api.orderOrderIdPut(order);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderPostTest() throws ApiException {
        Order order = null;
        Order response = api.orderPost(order);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellerGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<Seller> response = api.sellerGet(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create information about seller
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellerPostTest() throws ApiException {
        Seller seller = null;
        Seller response = api.sellerPost(seller);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delate information about seller by seller id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellerSellerIdDeleteTest() throws ApiException {
        Integer sellerId = null;
        api.sellerSellerIdDelete(sellerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get information about seller by seller id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellerSellerIdGetTest() throws ApiException {
        Integer sellerId = null;
        Seller response = api.sellerSellerIdGet(sellerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change information about seller
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellerSellerIdPutTest() throws ApiException {
        Seller seller = null;
        Seller response = api.sellerSellerIdPut(seller);

        // TODO: test validations
    }
    
}
