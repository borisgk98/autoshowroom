/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mera.borisgk98.autoshowroom.server.rest.api;

import com.mera.borisgk98.autoshowroom.server.models.AutoMark;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-21T15:49:56.600+03:00[Europe/Moscow]")

@Validated
@Api(value = "automark", description = "the automark API")
public interface AutomarkApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "automarkAutomarkIdDelete", notes = "Delate information about automark by automark id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deletting"),
        @ApiResponse(code = 404, message = "Not found automark by this automark_id") })
    @RequestMapping(value = "/automark/{automark_id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> automarkAutomarkIdDelete(@ApiParam(value = "",required=true) @PathVariable("automark_id") Integer automarkId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "automarkAutomarkIdGet", notes = "Get information about automark by automark id", response = AutoMark.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = AutoMark.class),
        @ApiResponse(code = 404, message = "Not found automark by this automark_id") })
    @RequestMapping(value = "/automark/{automark_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AutoMark> automarkAutomarkIdGet(@ApiParam(value = "",required=true) @PathVariable("automark_id") Integer automarkId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"audi\",  \"autos\" : [ null, null ],  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "automarkAutomarkIdPut", notes = "Change information about automark", response = AutoMark.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful changing", response = AutoMark.class) })
    @RequestMapping(value = "/automark/{automark_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<AutoMark> automarkAutomarkIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AutoMark autoMark) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"audi\",  \"autos\" : [ null, null ],  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "automarkGet", notes = "", response = AutoMark.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of automarks", response = AutoMark.class, responseContainer = "List") })
    @RequestMapping(value = "/automark",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<AutoMark>> automarkGet(@ApiParam(value = "Limit for number of returnig values") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Offset for number of returnig values") @Valid @RequestParam(value = "offset", required = false) Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"audi\",  \"autos\" : [ null, null ],  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "automarkPost", notes = "Create information about automark", response = AutoMark.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful adding", response = AutoMark.class) })
    @RequestMapping(value = "/automark",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AutoMark> automarkPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AutoMark autoMark) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"audi\",  \"autos\" : [ null, null ],  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
