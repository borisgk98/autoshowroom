/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mera.borisgk98.autoshowroom.server.rest.api;

import com.mera.borisgk98.autoshowroom.server.models.Order;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-21T15:49:56.600+03:00[Europe/Moscow]")

@Validated
@Api(value = "order", description = "the order API")
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "orderGet", notes = "", response = Order.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of orders", response = Order.class, responseContainer = "List") })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Order>> orderGet(@ApiParam(value = "Limit for number of returnig values") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Offset for number of returnig values") @Valid @RequestParam(value = "offset", required = false) Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"seller\" : {    \"name\" : \"SallerName\",    \"orders\" : [ null, null ],    \"id\" : 6  },  \"auto\" : {    \"options\" : [ {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    }, {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    } ],    \"model\" : {      \"name\" : \"q5\",      \"autos\" : [ null, null ],      \"id\" : 1    },    \"id\" : 0,    \"mark\" : {      \"name\" : \"audi\",      \"autos\" : [ null, null ],      \"id\" : 6    }  },  \"id\" : 0,  \"customer\" : {    \"surname\" : \"Kozhuhovskij\",    \"name\" : \"Boris\",    \"orders\" : [ null, null ],    \"id\" : 1  },  \"status\" : \"DONE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orderOrderIdDelete", notes = "Delate information about order by order id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful deletting"),
        @ApiResponse(code = 404, message = "Not found order by this order_id") })
    @RequestMapping(value = "/order/{order_id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> orderOrderIdDelete(@ApiParam(value = "",required=true) @PathVariable("order_id") Integer orderId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orderOrderIdGet", notes = "Get information about order by order id", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Order.class),
        @ApiResponse(code = 404, message = "Not found order by this order_id") })
    @RequestMapping(value = "/order/{order_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Order> orderOrderIdGet(@ApiParam(value = "",required=true) @PathVariable("order_id") Integer orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"seller\" : {    \"name\" : \"SallerName\",    \"orders\" : [ null, null ],    \"id\" : 6  },  \"auto\" : {    \"options\" : [ {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    }, {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    } ],    \"model\" : {      \"name\" : \"q5\",      \"autos\" : [ null, null ],      \"id\" : 1    },    \"id\" : 0,    \"mark\" : {      \"name\" : \"audi\",      \"autos\" : [ null, null ],      \"id\" : 6    }  },  \"id\" : 0,  \"customer\" : {    \"surname\" : \"Kozhuhovskij\",    \"name\" : \"Boris\",    \"orders\" : [ null, null ],    \"id\" : 1  },  \"status\" : \"DONE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orderOrderIdPut", notes = "Change information about order", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful changing", response = Order.class) })
    @RequestMapping(value = "/order/{order_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Order> orderOrderIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order order) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"seller\" : {    \"name\" : \"SallerName\",    \"orders\" : [ null, null ],    \"id\" : 6  },  \"auto\" : {    \"options\" : [ {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    }, {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    } ],    \"model\" : {      \"name\" : \"q5\",      \"autos\" : [ null, null ],      \"id\" : 1    },    \"id\" : 0,    \"mark\" : {      \"name\" : \"audi\",      \"autos\" : [ null, null ],      \"id\" : 6    }  },  \"id\" : 0,  \"customer\" : {    \"surname\" : \"Kozhuhovskij\",    \"name\" : \"Boris\",    \"orders\" : [ null, null ],    \"id\" : 1  },  \"status\" : \"DONE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "orderPost", notes = "Create information about order", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful adding", response = Order.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Order> orderPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order order) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"seller\" : {    \"name\" : \"SallerName\",    \"orders\" : [ null, null ],    \"id\" : 6  },  \"auto\" : {    \"options\" : [ {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    }, {      \"name\" : \"4x4\",      \"autos\" : [ null, null ],      \"id\" : 5    } ],    \"model\" : {      \"name\" : \"q5\",      \"autos\" : [ null, null ],      \"id\" : 1    },    \"id\" : 0,    \"mark\" : {      \"name\" : \"audi\",      \"autos\" : [ null, null ],      \"id\" : 6    }  },  \"id\" : 0,  \"customer\" : {    \"surname\" : \"Kozhuhovskij\",    \"name\" : \"Boris\",    \"orders\" : [ null, null ],    \"id\" : 1  },  \"status\" : \"DONE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
