package com.mera.borisgk98.autoshowroom.server.rest.api;

import com.mera.borisgk98.autoshowroom.server.exceptions.ModelNotFound;
import com.mera.borisgk98.autoshowroom.server.models.$Model$;
import com.mera.borisgk98.autoshowroom.server.rest.api.$Modelufl$Api;
import com.mera.borisgk98.autoshowroom.server.services.$Model$Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-18T17:15:41.019+03:00[Europe/Moscow]")

@Controller
@RequestMapping("\${openapi.$model$showroom.base-path:}")
public class $Model$ApiController implements $Modelufl$Api {

    private final NativeWebRequest request;
    @Autowired
    protected $Model$Service $model$Service;
    @Value("\${defaultoffset}")
    protected Integer defaultOffset;

    @org.springframework.beans.factory.annotation.Autowired
    public $Model$ApiController(NativeWebRequest request) {
        this.request = request;
    }

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }

    @Override
    public ResponseEntity<$Model$> $model$$Modelufl$IdGet(Integer $model$Id) {
        try {
            $Model$ $model$ = $model$Service.read($model$Id);
            return ResponseEntity.ok($model$);
        }
        catch (ModelNotFound e) {
            return new ResponseEntity<$Model$>(HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public ResponseEntity<$Model$> $model$Post(@Valid $Model$ $model$) {
        return ResponseEntity.ok($model$Service.create($model$));
    }

    @Override
    public ResponseEntity<Void> $model$$Modelufl$IdDelete(Integer $model$Id) {
        try {
            $model$Service.delete($model$Id);
            return new ResponseEntity<Void>(HttpStatus.OK);
        }
        catch (ModelNotFound e) {
            return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public ResponseEntity<$Model$> $model$$Modelufl$IdPut(@Valid $Model$ $model$) {
        try {
            $Model$ new$Model$ = $model$Service.update($model$);
            return ResponseEntity.ok(new$Model$);
        }
        catch (ModelNotFound e) {
            return new ResponseEntity<$Model$>(HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public ResponseEntity<List<$Model$>> $model$Get(Integer limit, Integer offset) {
        if (limit == null) {
            return ResponseEntity.ok($model$Service.getAll());
        }
        if (offset == null) {
            offset = defaultOffset;
        }
        return ResponseEntity.ok($model$Service.getRange(offset, limit));
    }
}
